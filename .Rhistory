filter(starwars,species=="Human",mass < 100)
filter(starwars,species=="Human" | mass < 100)
## mutate: create a new column
mutate(starwars,height_by_mass = height / mass)
## group_by:
group_by(starwars,gender)
?group_by
unique(starwars$gender)
## summarize: create stats from group data
summarize(starwars,group_by(starwars,gender),mean_mass = mean(mass))
## summarize: create stats from group data
summarize(starwars,group_by(gender),mean_mass = mean(mass))
## summarize: create stats from group data
summarize(group_by(starwars,gender),mean_mass = mean(mass))
View(starwars)
## summarize: create stats from group data
summarize(group_by(starwars,gender),mean_mass = mean(mass,na.remove=T))
## summarize: create stats from group data
summarize(group_by(starwars,gender),mean_mass = mean(mass,na.rm=T))
summarize(group_by(starwars,gender),mean_height = mean(height,na.rm=T))
## arrange: sort columns
arrange(starwars,mass)
arrange(starwars,desc(mass))
## count: count discrete values
count(starwars,sex)
## pipes: the usual way to use dplyr --> dataframe %>% operation1 %>% operation 2 .....
starwars %>% select(height > 100)
## pipes: the usual way to use dplyr --> dataframe %>% operation1 %>% operation 2 .....
starwars %>% select(height)
## pipes: the usual way to use dplyr --> dataframe %>% operation1 %>% operation 2 .....
starwars %>% select(name,height)
starwars %>% group_by(gender) %>% summarise(mean_mas=mean(mass,na.rm=T))
starwars %>% select(name:species)
starwars %>% select(name:species) %>% filter(species != "Human")
##### dplyr #####
library(dplyr)
data(starwars)
head(starwars)
## select: subset column ##
select(starwars,name,height,mass,species,homeworld)
select(starwars,name:homeworld)
## filter: subset rows by condition ##
filter(starwars,species=="Droid")
filter(starwars,species=="Human",mass < 100)
filter(starwars,species=="Human" | mass < 100)
## mutate: create a new column
mutate(starwars,height_by_mass = height / mass)
## group_by: group data
group_by(starwars,gender)
## summarize: create stats from group data
summarize(group_by(starwars,gender),mean_mass = mean(mass,na.rm=T))
summarize(group_by(starwars,gender),mean_height = mean(height,na.rm=T))
## arrange: sort columns
arrange(starwars,mass)
arrange(starwars,desc(mass))
## count: count discrete values
count(starwars,sex)
## pipes: the usual way to use dplyr --> dataframe %>% operation1 %>% operation 2 .....
starwars %>% select(name,height)
starwars %>% group_by(gender) %>% summarise(mean_mas=mean(mass,na.rm=T))
starwars %>% select(name:species) %>% filter(species != "Human")
starwars %>% select(name:species) %>% filter(species != "Human") %>% group_by(sex)
starwars %>% select(name:species) %>% filter(species != "Human") %>% group_by(sex) %>% summarize(max(height))
starwars %>% select(name:species) %>% filter(species != "Human") %>% group_by(sex) %>% summarize(max_height = max(height))
starwars %>% select(name:species) %>% filter(species != "Human") %>% group_by(sex) %>% summarize(max_height = max(height,na.rm=T))
## Reshaping DataFrame
data("Titanic")
head(Titanic)
Titanic
Titanic
## Reshaping DataFrame
data("ToothGrowth")
head(ToothGrowth)
## Reshaping DataFrame
data(mpg)
## Reshaping DataFrame
head(mpg)
## Reshaping DataFrame
head(USArrests)
## join: join two datasets
df1 = data.frame(ID = c(1, 2, 3, 4, 5),
w = c('a', 'b', 'c', 'd', 'e'),
x = c(1, 1, 0, 0, 1),
y=rnorm(5),
z=letters[1:5])
df2 = data.frame(ID = c(1, 7, 3, 6, 8),
a = c('z', 'b', 'k', 'd', 'l'),
b = c(1, 2, 3, 0, 4),
c =rnorm(5),
d =letters[2:6])
inner_join(df1, df2, by = "ID")
library(dplyr)
head(band_instruments)
head(band_members)
band_members %>% inner_join(band_instruments)
superheroes <- tibble::tribble(
~name, ~alignment,  ~gender,          ~publisher,
"Magneto",      "bad",   "male",            "Marvel",
"Storm",     "good", "female",            "Marvel",
"Mystique",      "bad", "female",            "Marvel",
"Batman",     "good",   "male",                "DC",
"Joker",      "bad",   "male",                "DC",
"Catwoman",      "bad", "female",                "DC",
"Hellboy",     "good",   "male", "Dark Horse Comics"
)
publishers <- tibble::tribble(
~publisher, ~yr_founded,
"DC",       1934L,
"Marvel",       1939L,
"Image",       1992L
)
View(superheroes)
superheroes = data.frame(name = c("Magneto","Storm","Mystique","Batman","Joker","Catwoman","Hellboy"),
alignment = c("bad","good","bad","good","bad","bad","good"))
superheroes = data.frame(name = c("Magneto","Storm","Mystique","Batman","Joker","Catwoman","Hellboy"),
alignment = c("bad","good","bad","good","bad","bad","good"),
gender = c("male","female","female","male","male","female","male"),
publisher = c("Marvel","Marvel","Marvel","DC","DC","DC","Dark Horse Comics"))
publishers = data.frame(publisher = c("DC","Marvel","Image"),
year_founded = c(1934,1939,1992))
inner_join(superheroes,publishers)
inner_join(superheroes,publishers,by="publisher")
## Left join: prioritizes left table
left_join(superheroes,publishers,by="publisher")
left_join(publishers,superheroes,by="publisher")
## Right join: prioritizes right table
left_join(superheroes,publishers,by="publisher")
right_join(publishers,superheroes,by="publisher")
## Full join: retains all rows
full_join(superheroes,publishers,by="publisher")
superheroes %>% inner_join(publishers,by="publisher")
## Left join: prioritizes left table
superheroes %>% left_join(publishers,by="publisher")
## Right join: prioritizes right table
publishers %>% right_join(superheroes,by="publisher")
## Full join: retains all rows
superheroes %>% full_join(publishers,by="publisher")
superheroes %>% inner_join(publishers,by="publisher") %>% filter(alignment == "good")
superheroes %>% semi_join(publishers,by="publisher")
superheroes %>% inner_join(publishers,by="publisher")
superheroes %>% semi_join(publishers,by="publisher")
## Semi join: match in both tables but do not add the information from the second table
superheroes %>% inner_join(publishers,by="publisher")
superheroes %>% semi_join(publishers,by="publisher")
## anti_join
superheroes %>% anti_join(publishers,by="publisher")
superheroes %>% inner_join(publishers,by="publisher") %>% filter(alignment == "good")
library(incidence)
install.packages("EpiEstim")
library(ggplot2)
genes = paste0("Gene",seq(1,10))
samples = paste0("Sample",seq(1,4))
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)),4),
sample = rep(paste0("Sample",seq(1,4)),10))
View(gene_expression)
gene = rep(paste0("Gene",seq(1,10)),4)
rep(paste0("Sample",seq(1,4)),10)
c(1)*4
rep(c('a', 'b', 'c'), 4)
rep(c('a', 'b', 'c'), c(4,4,4))
rep(c('a', 'b', 'c'), rep(10,10))
rep(10,10)
rep(c('a', 'b', 'c'), c(rep(3,3))
)
rep(paste0("Gene",seq(1,10)), c(rep(10,10)))
rep(paste0("Gene",seq(1,10)), c(rep(10,4)))
rep(paste0("Gene",seq(1,10)), c(rep(4,10)))
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)), c(rep(4,10))),
sample = rep(paste0("Sample",seq(1,4)),10))
View(gene_expression)
rep(paste0("Sample",seq(1,4)),10)
rep(paste0("Group",seq(1,2)), c(rep(4,10)))
rep(paste0("Group",seq(1,2)), c(rep(2,10)))
rep(paste0("Group",seq(1,2)), c(rep(2,4)))
rep(paste0("Group",seq(1,2)),2)
rep(paste0("Group",seq(1,2)),5)
rep(paste0("Group",seq(1,2)),20)
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)), c(rep(4,10))),
sample = rep(paste0("Sample",seq(1,4)),10),
rep(paste0("Group",seq(1,2)),20))
View(gene_expression)
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)), c(rep(4,10))),
sample = rep(paste0("Sample",seq(1,4)),10),
group = rep(paste0("Group",seq(1,2)),20))
rnorm(40)
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)), c(rep(4,10))),
sample = rep(paste0("Sample",seq(1,4)),10),
group = rep(paste0("Group",seq(1,2)),20),
values = rnorm(40))
View(gene_expression)
ggplot(data = gene_expression,aes(x=gene,y=values))+
geom_point()
ggplot(data = gene_expression,aes(x=gene,y=values))+
geom_boxplot()
ggsave("Figures/1_toyexample.png",plot = a)
a = ggplot(data = gene_expression,aes(x=gene,y=values))+
geom_boxplot()
print(a)
ggsave("Figures/1_toyexample.png",plot = a)
head(gene_expression)
library(dplyr)
##### Basic Operation #####
data(starwars)
head(starwars)
## select: subset column ##
select(starwars,name,height,mass,species,homeworld)
select(starwars,name:homeworld)
## filter: subset rows by condition ##
filter(starwars,species=="Droid")
filter(starwars,species=="Human",mass < 100)
filter(starwars,species=="Human" | mass < 100)
## mutate: create a new column
mutate(starwars,height_by_mass = height / mass)
## group_by: group data
group_by(starwars,gender)
## summarize: create stats from group data
summarize(group_by(starwars,gender),mean_mass = mean(mass,na.rm=T))
summarize(group_by(starwars,gender),mean_height = mean(height,na.rm=T))
## arrange: sort columns
arrange(starwars,mass)
arrange(starwars,desc(mass))
## count: count discrete values
count(starwars,sex)
## pipes: the usual way to use dplyr --> dataframe %>% operation1 %>% operation 2 .....
starwars %>% select(name,height)
library(dplyr)
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)), c(rep(4,10))),
sample = rep(paste0("Sample",seq(1,4)),10),
group = rep(paste0("Group",seq(1,2)),20),
values = rnorm(40))
library("pasilla")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pasilla")
library("pasilla") #Bioconductor
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
head(cts)
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
head(coldata)
rownames(coldata) = colnames(cts)
head(coldata)
######## The logical way --> Loop ##########
gene_expression = data.frame(matrix(NA,ncol = 3))
colnames(gene_expression) = c("sample","gene","value")
for (samplename in colnames(cts)){
gene_vals = cts[,samplename]
}
######## The logical way --> Loop ##########
gene_expression = data.frame(matrix(NA,ncol = 3))[0,]
colnames(gene_expression) = c("sample","gene","value")
for (samplename in colnames(cts)){
gene_vals = cts[,samplename]
gene_expression = rbind(gene_expression,data.frame(sample = samplename,gene = rownames(cts),value = gene_vals))
}
coldata$sample = rownames(coldata)
gene_expression = merge(gene_expression,coldata,by="sample")
View(gene_expression)
cts %>% pivot_longer(colnames(gene_expression), names_to = "Stat", values_to = "Pval")
######## Using DPLYR ##########
library(dplyr)
gene_expression = cts %>% pivot_longer(colnames(gene_expression), names_to = "Stat", values_to = "Pval")
######## Using DPLYR ##########
library(dplyr)
######## Using TIDYR ##########
library(tidyr)
gene_expression = cts %>% pivot_longer(colnames(gene_expression), names_to = "Stat", values_to = "Pval")
gene_expression = melt(cts, variable.name = "sample")
######## Using TIDYR ##########
library(reshape2)
gene_expression = melt(cts, variable.name = "sample")
View(gene_expression)
library(dplyr)
gene_expression = melt(cts, variable.name = "sample") %>% full_join(coldata,by="sample")
melt(cts, variable.name = "sample")
melt(cts, varnames=c('gene', 'sample'))
gene_expression = melt(cts, varnames=c('gene', 'sample')) %>% full_join(coldata,by="sample")
cts %>% pivot_longer(names_to = "income", values_to = "count")
gene_expression = as.data.frame(cts) %>% pivot_longer(names_to = "income", values_to = "count")
gene_expression = as.data.frame(cts) %>% pivot_longer(cols = colnames(cts),names_to = "income", values_to = "count")
View(gene_expression)
gene_expression = as.data.frame(cts) %>% pivot_longer(cols = colnames(cts),names_to = "sample", values_to = "count")
View(gene_expression)
as.data.frame(cts) %>% mutate(geneID = rownames)
as.data.frame(cts) %>% mutate(geneID = rownames(cts))
as.data.frame(cts) %>% mutate(geneID = rownames())
as.data.frame(cts) %>% add_rownames(var = "gene")
as.data.frame(cts) %>% rownames_to_columns(var = "gene")
library(tibble)
as.data.frame(cts) %>% rownames_to_columns(var = "gene")
as.data.frame(cts) %>% rownames_to_column(var = "gene")
as.data.frame(cts) %>% rownames_to_column(var = "gene") %>%  pivot_longer(cols = rownames(coldata),
names_to = "sample",
values_to = "value")
gene_expression %>% pivot_wider(names_from = "sample", values_from = "value")
gene_expression
gene_expression = as.data.frame(cts) %>% rownames_to_column(var = "gene") %>%  pivot_longer(cols = rownames(coldata),names_to = "sample",values_to = "value")
View(gene_expression)
gene_expression = melt(cts, varnames=c('gene', 'sample')) %>% full_join(coldata,by="sample")
View(gene_expression)
gene_expression = as.data.frame(cts) %>%
rownames_to_column(var = "gene") %>%
pivot_longer(cols = rownames(coldata),names_to = "sample",values_to = "value") %>%
full_join(coldata,by="sample")
gene_expression = melt(cts, varnames=c('gene', 'sample')) %>% full_join(coldata,by="sample")
gene_expression %>% pivot_wider(names_from = "sample", values_from = "value")
a = gene_expression %>% pivot_wider(names_from = "sample", values_from = "value")
View(a)
View(gene_expression)
a = gene_expression[,c("gene","sample","value")] %>% pivot_wider(names_from = "sample", values_from = "value")
View(a)
View(a)
cts = gene_expression[,c("gene","sample","value")] %>% pivot_wider(names_from = "sample", values_from = "value") %>%
column_to_rownames(var = "gene")
View(cts)
cts = gene_expression[,c("gene","sample","value")] %>% pivot_wider(names_from = "sample", values_from = "value") %>%
column_to_rownames(var = "gene") %>% as.matrix()
cts = dcast(gene_expression, gene ~ sample, value.var = "count")
cts = dcast(gene_expression, gene ~ sample, value.var = "value")
cts = dcast(gene_expression, gene ~ sample, value.var = "value") %>%
column_to_rownames(var = "gene") %>% as.matrix()
View(cts)
View(cts)
gene_expression[,c("sample","type","condition")] %>% pivot_wider(names_from = "sample", values_from = c("type","condition"))
gene_expression[,c("sample","type","condition")] %>% pivot_wider(names_from = "sample", values_from = c("type"))
gene_expression[,c("sample","type","condition")] %>% pivot_wider(names_from = "sample")
gene_expression[,c("sample","type","condition")] %>% pivot_wider(values_from = "sample")
gene_expression[,c("sample","type","condition")] %>% pivot_wider(names_from = "sample",values_from = "sample")
### Toy example 1
library(ggplot2)
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)), c(rep(4,10))),
sample = rep(paste0("Sample",seq(1,4)),10),
group = rep(paste0("Group",seq(1,2)),20),
values = rnorm(40))
head(gene_expression)
a = ggplot(data = gene_expression,aes(x=gene,y=values))+
geom_boxplot()
print(a)
ggsave("Figures/1_toyexample.png",plot = a)
### Toy example 2
library(dplyr)
library(reshape2)
library(pasilla)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
head(cts)
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
rownames(coldata) = colnames(cts)
head(coldata)
gene_expression = melt(cts, varnames=c('gene', 'sample')) %>% full_join(coldata,by="sample")
library(ggplot2)
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)), c(rep(4,10))),
sample = rep(paste0("Sample",seq(1,4)),10),
group = rep(paste0("Group",seq(1,2)),20),
values = rnorm(40))
head(gene_expression)
a = ggplot(data = gene_expression,aes(x=gene,y=values))+
geom_boxplot()
print(a)
ggsave("Figures/1_toyexample.png",plot = a)
### Toy example 2
library(dplyr)
library(reshape2)
library(pasilla)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
head(cts)
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
rownames(coldata) = colnames(cts)
head(coldata)
gene_expression = melt(cts, varnames=c('gene', 'sample')) %>% full_join(coldata,by="sample")
melt(cts, varnames=c('gene', 'sample'))
### Toy example 1
library(ggplot2)
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)), c(rep(4,10))),
sample = rep(paste0("Sample",seq(1,4)),10),
group = rep(paste0("Group",seq(1,2)),20),
values = rnorm(40))
head(gene_expression)
a = ggplot(data = gene_expression,aes(x=gene,y=values))+
geom_boxplot()
print(a)
ggsave("Figures/1_toyexample.png",plot = a)
### Toy example 2
library(dplyr)
library(reshape2)
library(pasilla)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
head(cts)
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
rownames(coldata) = colnames(cts)
coldata$sample = rownames(coldata)
head(coldata)
gene_expression = melt(cts, varnames=c('gene', 'sample')) %>% full_join(coldata,by="sample")
### Toy example 2
library(dplyr)
library(reshape2)
library(pasilla)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
head(cts)
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
rownames(coldata) = colnames(cts)
coldata$sample = rownames(coldata)
head(coldata)
gene_expression = melt(cts, varnames=c('gene', 'sample')) %>% full_join(coldata,by="sample")
a = ggplot(data = gene_expression,aes(x=gene,y=values))+
geom_boxplot()
print(a)
library(ggplot2)
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)), c(rep(4,10))),
sample = rep(paste0("Sample",seq(1,4)),10),
group = rep(paste0("Group",seq(1,2)),20),
value = rnorm(40))
head(gene_expression)
a = ggplot(data = gene_expression,aes(x=gene,y=value))+
geom_boxplot()
print(a)
ggsave("Figures/1_toyexample.png",plot = a)
### Toy example 2
library(dplyr)
library(reshape2)
library(pasilla)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
head(cts)
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
rownames(coldata) = colnames(cts)
coldata$sample = rownames(coldata)
head(coldata)
gene_expression = melt(cts, varnames=c('gene', 'sample')) %>% full_join(coldata,by="sample")
a = ggplot(data = gene_expression,aes(x=gene,y=value))+
geom_boxplot()
print(a)
ggsave("Figures/2_toyexample.png",plot = a)
a = ggplot(data = gene_expression,aes(x=sample,y=value))+
geom_boxplot()
print(a)
ggsave("Figures/1_toyexample.png",plot = a)
a = ggplot(data = gene_expression,aes(x=sample,y=value))+
geom_boxplot()
print(a)
### Toy example 1
library(ggplot2)
gene_expression = data.frame(gene = rep(paste0("Gene",seq(1,10)), c(rep(4,10))),
sample = rep(paste0("Sample",seq(1,4)),10),
group = rep(paste0("Group",seq(1,2)),20),
value = rnorm(40))
head(gene_expression)
a = ggplot(data = gene_expression,aes(x=sample,y=value))+
geom_boxplot()
print(a)
ggsave("Figures/1_toyexample.png",plot = a)
### Toy example 2
library(dplyr)
library(reshape2)
library(pasilla)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
head(cts)
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
rownames(coldata) = colnames(cts)
coldata$sample = rownames(coldata)
head(coldata)
gene_expression = melt(cts, varnames=c('gene', 'sample')) %>% full_join(coldata,by="sample")
a = ggplot(data = gene_expression,aes(x=sample,y=value))+
geom_boxplot()
print(a)
ggsave("Figures/2_toyexample.png",plot = a)
